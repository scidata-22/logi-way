//CUSTOMER PERFORMANCE SUMMARY
WITH customer_file_container AS (
  SELECT
    c.CUSTOMER_ID,
    c.CLIENT_NAME,
    f.GLOBAL_FILE_ID,
    f.ORDER_DATE,
    f.REVENUE_USD,
    COALESCE(cn.TEU, 0) AS TEU,  -- Handle missing TEU in containers table
    f.DESTINATION_COUNTRY,
    f.ORIGIN_COUNTRY
  FROM SCREENING_BI.FREIGHT.CUSTOMERS c
  LEFT JOIN SCREENING_BI.FREIGHT.FILES f
    ON c.CUSTOMER_ID = f.CUSTOMER_ID
  LEFT JOIN SCREENING_BI.FREIGHT.CONTAINERS cn
    ON f.GLOBAL_FILE_ID = cn.GLOBAL_FILE_ID
)

SELECT 
  CUSTOMER_ID,
  CLIENT_NAME,
  COUNT(DISTINCT GLOBAL_FILE_ID) AS NUM_SHIPMENTS,  -- Count of unique shipments
  SUM(REVENUE_USD) AS TOTAL_REVENUE_USD,  -- Sum of revenue in USD
  SUM(TEU) AS TOTAL_TEU  -- Sum of TEU
FROM customer_file_container
GROUP BY CUSTOMER_ID, CLIENT_NAME;

// VERTICAL PERFORMANCE SUMMARY
WITH vertical_summary AS ( 
  SELECT
    c.VERTICAL,
    f.DESTINATION_COUNTRY,
    SUM(f.REVENUE_USD) AS TOTAL_REVENUE_USD,
    COUNT(DISTINCT f.GLOBAL_FILE_ID) AS NUM_SHIPMENTS
  FROM SCREENING_BI.FREIGHT.CUSTOMERS c
  JOIN SCREENING_BI.FREIGHT.FILES f
    ON c.CUSTOMER_ID = f.CUSTOMER_ID
  GROUP BY c.VERTICAL, f.DESTINATION_COUNTRY
)

SELECT * FROM vertical_summary;

//SHIPPING DELIVERY PERFORMANCE SUMMARY
WITH performance_metrics AS (
  SELECT
    f.GLOBAL_FILE_ID,
    f.CUSTOMER_ID,
    f.ORDER_DATE,
    f.REQUESTED_DELIVERY_DATE,
    f.DELIVERY_DATE,
    DATEDIFF(DAY, f.REQUESTED_DELIVERY_DATE, f.DELIVERY_DATE) AS DELIVERY_DELAY  -- Fix: add 'DAY' as the first argument
  FROM SCREENING_BI.FREIGHT.FILES f
  WHERE f.REQUESTED_DELIVERY_DATE IS NOT NULL AND f.DELIVERY_DATE IS NOT NULL 
)

SELECT 
  CUSTOMER_ID,
  AVG(DELIVERY_DELAY) AS AVG_DELIVERY_DELAY,
  COUNT(CASE WHEN DELIVERY_DELAY > 0 THEN 1 END) AS NUM_DELAYS,
  COUNT(CASE WHEN DELIVERY_DELAY < 0 THEN 1 END) AS NUM_EARLY_DELIVERIES
FROM performance_metrics
GROUP BY CUSTOMER_ID;